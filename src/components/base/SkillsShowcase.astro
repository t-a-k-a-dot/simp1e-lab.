---
import { cn } from '~/lib/utils'
import type { SkillData, Skill } from '~/types'

interface Props {
  skillsData: SkillData[]
}

const { skillsData }: Props = Astro.props

const duplicateSkills = (skills: Skill[]) => [...skills, ...skills, ...skills]
---

<div class="relative py-2 px-2 max-md:px-0">
  {
    skillsData.map((row: SkillData) => {
      const duplicatedSkills = duplicateSkills(row.skills)
      return (
        <div class="relative w-full overflow-hidden my-4 group">
          <div
            class={cn(
              'flex w-max',
              row.direction === 'right' ? 'animate-[scroll-reverse_20s_linear_infinite]' : 'animate-[scroll_20s_linear_infinite]',
              'group-hover:[animation-play-state:paused]'
            )}
          >
            {duplicatedSkills.map((skill) => (
              <div class="group flex items-center gap-2 px-5 py-2 mx-2 rounded-full border border-border bg-accent text-foreground whitespace-nowrap hover:bg-tag-bg-hover dark:shadow-md">
                <span class={cn('flex items-center justify-center w-5 h-5', skill.icon)} />
                <span class="font-sans text-sm font-medium">{skill.name}</span>
              </div>
            ))}
          </div>
        </div>
      )
    })
  }
  <div class="pointer-events-none absolute left-0 top-0 w-[30%] h-full z-50 bg-gradient-to-r from-background to-transparent"></div>
  <div class="pointer-events-none absolute right-0 top-0 w-[30%] h-full z-50 bg-gradient-to-l from-background to-transparent"></div>
</div>

<style is:global>
  @keyframes scroll {
    0% {
      transform: translateX(0);
    }
    100% {
      transform: translateX(-33.33333%);
    }
  }
  @keyframes scroll-reverse {
    0% {
      transform: translateX(-33.33333%);
    }
    100% {
      transform: translateX(0);
    }
  }
</style>
<script>
  // 动态调整动画速度
  function adjustAnimationSpeed() {
    const tracks = document.querySelectorAll<HTMLElement>('.flex.w-max')
    const screenWidth = window.innerWidth
    const baseSpeed = 20
    const speedFactor = Math.max(0.5, Math.min(1.5, screenWidth / 1000))
    const newDuration = `${baseSpeed * speedFactor}s`

    tracks.forEach((track) => {
      // 直接更新动画持续时间，不暂停动画
      track.style.animationDuration = newDuration
    })
  }

  // 监听事件
  window.addEventListener('before-swap', adjustAnimationSpeed)
</script>
